@page "/portfolios/{id}"
@using StockResearchPlatform.Models;
@using StockResearchPlatform.Models.PageModels;
@using StockResearchPlatform.Models.PolygonModels;
@using StockResearchPlatform.Services;
@using StockResearchPlatform.Services.Polygon;
@inject StockService stockService
@inject PortfolioService portfolioService
@inject AtomicBreakdownService atomicBreakdownService
@inject PortfolioExposureService portfolioExposureService
@inject PolygonTickerService polygonTickerService
@inject IJSRuntime JSRuntime

<style>
    #header {
        text-align: center;
    }

    #data{
        text-align:right;
    }

    .button {
        background-color: lightcyan;
        border-color: blue;
        padding: 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        margin: 2px 2px;
        cursor: pointer;
        border-radius: 8px;
    }

    .button1 {
        background-color: lightcyan;
        border-color: blue;
    }

    .button2 {
        background-color: #FFCCCB;
        border-color: red;
    }

</style>


<h1>@this.PortfolioDisplayModel.Portfolio?.Name</h1>

<table>
    @if(this.PortfolioDisplayModel.Stocks != null && this.PortfolioDisplayModel.Stocks.Count > 0)
    {
        <tr>
            <th id="header">Ticker</th>
            <th id="header">Quantity</th>
            <th id="header">Cost Per Share</th>
            <th id="header">Cost Basis</th>
            <th id="header">Current Share Price</th>
            <th id="header">Current Value</th>
            <th id="header">200-Day SMA</th>
            <th id="header">Distance From 200-Day SMA</th>
        </tr>
        double totalCostBasis = 0.0;
        double totalCurrentValue = 0.0;
        @foreach (var stock in this.PortfolioDisplayModel.Stocks)
        {
            var currentStockCostBasis = stock.Value.NumberOfShares * stock.Value.CostBasis;
            var currentStockValue = PortfolioDisplayModel.CurrentPricingData[stock.Key].ticker.day.c * stock.Value.NumberOfShares;
            var currentStockSma = PortfolioDisplayModel.StockToSimpleMovingAverage[stock.Key].results.values[0].value;
            totalCostBasis += currentStockCostBasis;
            totalCurrentValue += currentStockValue;
            <tr>
                <td>@stock.Key.Ticker.ToUpper()</td>
                <td id="data">@String.Format("{0:0.00}" ,stock.Value.NumberOfShares)</td>
                <td id="data">@String.Format("{0:C}" ,stock.Value.CostBasis)</td>
                <td id="data">@String.Format("{0:C}" ,currentStockCostBasis)</td>
                <td id="data">@String.Format("{0:C}" ,PortfolioDisplayModel.CurrentPricingData[stock.Key].ticker.day.c)</td>
                <td id="data">@String.Format("{0:C}" ,currentStockValue)</td>
                <td id="data">@String.Format("{0:C}" ,currentStockSma)</td>
                <td id="data">@String.Format("{0:0.00}", ((PortfolioDisplayModel.CurrentPricingData[stock.Key].ticker.day.c - currentStockSma) / currentStockSma) * 100 )%</td>
                <td><a role="button">Edit</a></td>
                <td><a role="button" @onclick="() => this.removeStock(stock.Value)">Remove</a></td>
            </tr>
        }
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td id="data">@String.Format("{0:C}", totalCostBasis)</td>
            <td></td>
            <td id="data">@String.Format("{0:C}", totalCurrentValue)</td>
            <td></td>
            <td></td>
        </tr>
    }
</table>
<input type="text" @bind=this.PortfolioDisplayModel.AddStockTicker hidden="@this.PortfolioDisplayModel.HideNewStock" placeholder="Ticker" />
<br />
<br />
<input type="number" @bind=this.PortfolioDisplayModel.AddStockCostBasis hidden="@this.PortfolioDisplayModel.HideNewStock" step="0.01" placeholder="Cost Per Share" />
<br />
<br />
<input type="number" @bind=this.PortfolioDisplayModel.AddStockNumOfShares hidden="@this.PortfolioDisplayModel.HideNewStock" step="0.01" placeholder="Number Of Shares" />
<br />
<br />

<button class="button button1" type="button" hidden="@this.PortfolioDisplayModel.HideNewStock" @onclick=submitNewStock>Add</button>
<button class="button button2" type="button" hidden="@this.PortfolioDisplayModel.HideNewStock" @onclick=cancelNewStock>Cancel</button>
<button @onclick=createNewStock hidden="@(this.PortfolioDisplayModel.HideNewStock == false)">Add Stock</button>
<button @onclick="async () => await atomicBreakDown()" hidden="@(this.PortfolioDisplayModel.HideNewStock == false)">Atomic Breakdown</button>
<button @onclick="async () => await createPieChart()" hidden="@(this.PortfolioDisplayModel.HideNewStock == false)">Portfolio Exposure Pie Chart</button>

<br />
<div class="pie-chart-wrapper">
    <canvas id="@CanvasId" height="10" class="responsive-pie-chart"></canvas>
</div>

@if (IsAtomicBreakdownCalled == true)
{
    @if (BreakdownData.Count == 0)
    {
        <h2>Loading Data. May take a few minutes.</h2>
    }
    else
    {
        <h2>Atomic Breakdown</h2>
        <table>
            <thead>
                <tr>
                    <th id="header">Category</th>
                    <th id="header">Value</th>
                    <th id="header">Percent</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < BreakdownData.Count && i < itemsToShow; i++)
                {
                    var key = BreakdownData.ElementAt(i).Key;
                    var value = BreakdownData.ElementAt(i).Value;
                    var percent = BreakdownDataByPercent.ContainsKey(key) ? BreakdownDataByPercent[key] : 0.0;

                    <tr>
                        <td id="data">@key</td>
                        <td id="data">@String.Format("{0:C}", value)</td>
                        <td id="data">@String.Format("{0:0.000%}", percent)</td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
        @if (itemsToShow < BreakdownData.Count)
        {
            <button @onclick="() => LoadMoreItems()">Show More</button>
        }
        @if (itemsToShow != BreakdownData.Count)
        {
            <button @onclick="() => ShowAll()">Show All</button>
        }
    }
}
else
{
}


<link rel="stylesheet" href="css/portfolio-display.css" />

@code {
    [Parameter]
    public string CanvasId { get; set; } = $"pie-chart-{Guid.NewGuid()}";

    [Parameter]
    public string? Id { get; set; }
    public int id { get; set; }
    private Dictionary<string, double> BreakdownData { get; set; } = new Dictionary<string, double>();
    private Dictionary<string, double> BreakdownDataByPercent { get; set; } = new Dictionary<string, double>();
    private Dictionary<string, double> PortfolioExposureData { get; set; } = new Dictionary<string, double>();

    private bool IsAtomicBreakdownCalled { get; set; } = false;
    bool showAll = false;

    PortfolioDisplayModel PortfolioDisplayModel;

    public int itemsToShow = 20;

    private void LoadMoreItems()
    {
        itemsToShow += 20;
        StateHasChanged();
    }

    void ShowAll()
    {
        itemsToShow = BreakdownData.Count;
        showAll = true;
    }

    protected override async Task OnInitializedAsync()
    {
        if (this.Id != null)
        {
            try
            {
                this.id = int.Parse(Id);
                this.PortfolioDisplayModel = new PortfolioDisplayModel(stockService, portfolioService, polygonTickerService);
                await this.PortfolioDisplayModel.BuildPortfolioDisplayModel(this.id);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    public async void createNewStock()
    {
        this.PortfolioDisplayModel.ShowNewStock();
    }

    public async Task atomicBreakDown()
    {
        itemsToShow = 20;
        showAll = false;
        IsAtomicBreakdownCalled = true;
        BreakdownData.Clear();
        BreakdownDataByPercent.Clear();
        BreakdownData = await atomicBreakdownService.AtomicBreakdown(this.PortfolioDisplayModel.Stocks);
        BreakdownDataByPercent = AtomicBreakdownService.ConvertBreakDownToPercentage(BreakdownData);

        // Set the boolean variable to true
        IsAtomicBreakdownCalled = true;

        // Force a re-render of the component
        StateHasChanged();
    }

    public async void submitNewStock()
    {
        this.PortfolioDisplayModel.AddNewStock();
    }

    public void cancelNewStock()
    {
        this.PortfolioDisplayModel.ClearNewStock();
    }

    public void removeStock(Models.StockPortfolio s)
    {
        this.PortfolioDisplayModel.RemoveStock(s);
    }

    private async Task createPieChart()
    {
        var dataDictionary = await portfolioExposureService.ConvertToPortfolioExposure(this.PortfolioDisplayModel.Stocks);
        var chartConfig = new
        {
            Type = "pie",
            Data = new
            {
                Labels = dataDictionary.Keys.ToArray(),
                Datasets = new[]
                {
                    new
                    {
                        Data = dataDictionary.Values.ToArray(),
                        BackgroundColor = new[] { "red", "orange", "yellow", "green", "blue",
                        "indigo", "violet", "pink", "cyan", "lime",
                        "lightcoral", "lightsalmon", "lightgreen", "lightblue", "lightsteelblue",
                        "darkred", "darkorange", "darkgoldenrod", "darkgreen", "darkblue" } // Add more colors if necessary
                    }
            }
            }
        };

        await JSRuntime.InvokeVoidAsync("createPieChart", CanvasId, chartConfig);
    }

}
