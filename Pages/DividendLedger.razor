@page "/dividendledger"
@attribute [Authorize]

<PageTitle>Dividend Ledger</PageTitle>

@using Microsoft.AspNetCore.Http
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using StockResearchPlatform.Models;
@using StockResearchPlatform.Repositories;
@using StockResearchPlatform.Services;
@inject IHttpContextAccessor httpContextAccessor
@inject DividendLedgerRepository _dividendLedgerRepository
@inject DividendInfoRepository _dividendInfoRepository
@inject PortfolioService _portfolioService
@inject AuthenticationStateProvider AuthenticationStateProvide
@inject UserManager<User> UserManager

<h1>Dividend Ledger</h1>
<ul id="table-section-selector">
	<li>
		<a id="ledger" @onclick="() => ChangeSection(DividendDisplayEnum.ledger)">Dividend Ledger</a>
	</li>
	<li>
		<a id ="upcoming" @onclick="() => ChangeSection(DividendDisplayEnum.upcoming)">Upcoming Dividends</a>
	</li>
</ul>
<br />
@if (this.CurrentDisplay == DividendDisplayEnum.ledger)
{
	<style>
		#ledger {
			color: blue;
			font-weight: bold;
			text-decoration: underline;
			font-size: larger;
			text-transform: uppercase;
			padding:inherit;
		}
	</style>
	<tr>
		<th id="header">Ticker</th>
		<th id="header">Pay Date</th>
		<th id="header">Amount</th>
		<th></th>
		<th></th>
	</tr>
	double totalDividendsPaid = 0.0;
	@foreach (var item in (LedgerEntries ?? new List<Models.StockDividendLedger>()))
	{
			totalDividendsPaid += item.Amount;
			<tr>
				<td>@item.FK_Stock.Ticker.ToUpper()</td>
				<td>@item.Date.ToString("dd MMMM yyyy")</td>
				<td id="amount">@String.Format("{0:C}" ,item.Amount)</td>
				<td><a role="button">Edit</a></td>
				<td><a role="button" @onclick="() => this.RemoveLedgerEntry(item)">Remove</a></td>
			</tr>
	}

	<tr>
		<td></td>
		<td></td>
		<td>@String.Format("{0:C}", totalDividendsPaid)</td>
		<td></td>
		<td></td>
	</tr>
}
else
{
	<style>
		#upcoming {
			color: blue;
			font-weight: bold;
			text-decoration: underline;
			font-size: larger;
			text-transform: uppercase;
			padding: inherit;
		}
	</style>
	<tr>
		<th id="header">Ticker</th>
		<th id="header">Declaration Date</th>
		<th id="header">Ex Dividend Date</th>
		<th id="header">Pay Date</th>
		<th id="header">Amount Per Share</th>
	</tr>

	@foreach (var item in (UpcomingDividends ?? new List<Models.DividendInfo>()))
	{
		<tr>
			<td>@item.Stock.Ticker.ToUpper()</td>
			<td>@item.DeclarationDate.ToString("dd MMMM yyyy")</td>
			<td>@item.ExDividendDate.ToString("dd MMMM yyyy")</td>
			<td>@item.PayDate.ToString("dd MMMM yyyy")</td>
			<td id="amount">@String.Format("{0:C}" ,item.Cashamount)</td>
		</tr>
	}
}

<link rel="stylesheet" href="css/dividend-ledger.css" />

@code {
	public Guid Uid;
	public DividendDisplayEnum CurrentDisplay = DividendDisplayEnum.ledger;
	public Models.DividendLedger? Ledger = null;

	// Lists to display
	public List<Models.StockDividendLedger> LedgerEntries;
	public List<Models.DividendInfo> UpcomingDividends;

	public enum DividendDisplayEnum
	{
		ledger,
		upcoming
	}

	public void ChangeSection(DividendDisplayEnum newDisplay)
	{
		this.CurrentDisplay = newDisplay;
	}

	public void RemoveLedgerEntry(Models.StockDividendLedger entry)
	{

	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvide.GetAuthenticationStateAsync();
		var userId = "";
		if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
		{
			userId = (await UserManager.GetUserAsync(authState.User)).Id;
		}
		Uid = new Guid(userId);
		GetDividendLedger();
		GetUpcomingDividends(userId);
	}

	private void GetDividendLedger()
	{

		Ledger = _dividendLedgerRepository.Retrieve(w => w.FK_UserId == Uid.ToString()).FirstOrDefault();
		if (Ledger == null)
		{
			Ledger = new Models.DividendLedger();
			Ledger.FK_UserId = Uid.ToString();
			_dividendLedgerRepository.Create(Ledger);
		}
		if (Ledger != null)
		{
			var entryICol = _dividendLedgerRepository.RetrieveEntries(Ledger);
			if (entryICol != null) LedgerEntries = entryICol.ToList();
		}
		if (this.LedgerEntries != null)
		{
			this.LedgerEntries = this.LedgerEntries.OrderByDescending(le => le.Date).ToList();
		}
	}

	private async void GetUpcomingDividends(string userId)
	{
		// Dictionary where each stock the user owns only appears once
		var stockPortfolios = await _portfolioService.GetStockPortfolios(userId);

		this.UpcomingDividends = new List<Models.DividendInfo>(stockPortfolios.Count);
		foreach (var item in stockPortfolios)
		{
			Models.DividendInfo info = _dividendInfoRepository.Retrieve(item.Key);
			if (info != null)
			{
				this.UpcomingDividends.Add(info);
			}
		}
		this.UpcomingDividends = this.UpcomingDividends.OrderByDescending(ud => ud.PayDate).ToList();
	}
}
